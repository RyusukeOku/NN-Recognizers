
import argparse
import pathlib
import torch

def inspect_fsa(fsa_path: pathlib.Path):
    """
    Loads an FSA data file generated by rpni.py and prints its structure
    in a human-readable format.
    """
    if not fsa_path.exists():
        print(f"Error: File not found at {fsa_path}")
        return

    print(f"--- Inspecting FSA from: {fsa_path} ---\n")

    # Load the FSA data dictionary
    try:
        fsa_data = torch.load(fsa_path)
        if not isinstance(fsa_data, dict):
            print("Error: The file does not contain a valid FSA data dictionary.")
            return
    except Exception as e:
        print(f"Error loading file: {e}")
        return

    # Extract data from the dictionary
    num_states = fsa_data.get('num_states')
    initial_state = fsa_data.get('initial_state')
    final_states = fsa_data.get('final_states')
    transitions = fsa_data.get('transitions')
    alphabet = fsa_data.get('alphabet')

    # --- Print Information ---

    if num_states is not None:
        print(f"Number of States: {num_states}")
    if initial_state is not None:
        print(f"Initial State: {initial_state}")
    if final_states is not None:
        print(f"Final States: {sorted(final_states)}")
    if alphabet is not None:
        print(f"Alphabet: {alphabet}")
    
    print("-" * 20)

    # Print transitions in a readable format
    print("Transitions:")
    if transitions and alphabet:
        # Sort transitions for a consistent and readable output
        sorted_transitions = sorted(transitions)
        for from_state, symbol_id, to_state in sorted_transitions:
            # Map symbol ID back to the actual symbol string
            symbol = alphabet[symbol_id]
            print(f"  State {from_state} --({symbol})--> State {to_state}")
    elif transitions:
        # Fallback if alphabet is missing for some reason
        for t in sorted(transitions):
            print(f"  {t}")
    else:
        print("  No transitions found.")
    
    print("\n--- End of Inspection ---")

def main():
    parser = argparse.ArgumentParser(
        description="Inspect a saved FSA data file generated by the RPNI script."
    )
    parser.add_argument(
        "fsa_path", 
        type=pathlib.Path, 
        help="Path to the .pt file containing the FSA data."
    )
    args = parser.parse_args()
    inspect_fsa(args.fsa_path)

if __name__ == "__main__":
    main()
